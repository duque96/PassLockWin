package com.passlock.async;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.net.ssl.HttpsURLConnection;

import org.json.JSONArray;
import org.json.JSONObject;

import com.passlock.utils.Utilidades;

import AESCrypt.AESCrypt;

public class AsyncGetAccounts {
	public static Map<String, List<String>> getAccounts() {
		Map<String, List<String>> map = new HashMap<>();
		StringBuilder result = new StringBuilder();

		try {
			URL mongoDB = new URL(Utilidades.URLFIRST + Utilidades.URLLAST);
			HttpsURLConnection con = (HttpsURLConnection) mongoDB.openConnection();
			con.setRequestMethod("GET");

			BufferedReader rd = new BufferedReader(new InputStreamReader(con.getInputStream()));
			String line;
			while ((line = rd.readLine()) != null) {
				result.append(line);
			}
			rd.close();
			JSONArray jsonArray = new JSONArray(result.toString());

			for (int i = 0; i < jsonArray.length(); i++) {
				List<String> list = new ArrayList<>();

				JSONObject jsonObject = jsonArray.getJSONObject(i);
				JSONObject _id = jsonObject.getJSONObject("_id");

				String id = _id.getString("$oid");
				String email = jsonObject.getString("email");
				String password = AESCrypt.decrypt(jsonObject.getString("password"), Utilidades.PW);
				String site = jsonObject.getString("site");

				list.add(email);
				list.add(password);
				list.add(id);

				map.put(site, list);
			}

			return map;

		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
}
